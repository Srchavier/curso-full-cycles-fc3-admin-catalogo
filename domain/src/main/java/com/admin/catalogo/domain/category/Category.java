/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.admin.catalogo.domain.category;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Objects;

import com.admin.catalogo.domain.AggregateRoot;
import com.admin.catalogo.domain.utils.InstantUtils;
import com.admin.catalogo.domain.validation.ValidationHandler;

public class Category extends AggregateRoot<CategoryID> implements Cloneable {

    
    private String name;
    private String description;
    private Boolean active;
    private Instant createdAt;
    private Instant updatedAt;
    private Instant deletedAt;

    public Category(CategoryID anId, final String aName, final String aDescription, final Boolean isActive,
            final Instant aCreationDate, final Instant aUpdateDate, final Instant aDeleteDate) {
        super(anId);
        this.name = aName;
        this.description = aDescription;
        this.active = isActive;
        this.createdAt = Objects.requireNonNull(aCreationDate, "'createdAt' should not be null");
        this.updatedAt =  Objects.requireNonNull(aUpdateDate, "'updatedAt' should not be null");
        this.deletedAt = aDeleteDate;
    }

    public static Category newCategory(final String aName, final String aDescription, final Boolean isActive) {
        final var id = CategoryID.unique();
        final var now = InstantUtils.now();
        final var deleteAt = isActive ? null: now; 
        return new Category(id, aName, aDescription, isActive, now, now, deleteAt);
    }

    public static Category with(final Category aCategory) {
        return with(
                aCategory.getId(),
                aCategory.name,
                aCategory.description,
                aCategory.isActive(),
                aCategory.createdAt,
                aCategory.updatedAt,
                aCategory.deletedAt
        );
    }

    public static Category with(
            final CategoryID anId,
            final String name,
            final String description,
            final Boolean active,
            final Instant createdAt,
            final Instant updatedAt,
            final Instant deletedAt
    ) {
        return new Category(
                anId,
                name,
                description,
                active,
                createdAt,
                updatedAt,
                deletedAt
        );
    }


      /**
     * @return String return the name
     */
    @Override
    public CategoryID getId() {
        return id;
    }

    /**
     * @return String return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return String return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * @return Boolean return the Active
     */
    public Boolean isActive() {
        return active;
    }

    /**
     * @param Active the Active to set
     */
    public void setActive(Boolean Active) {
        this.active = Active;
    }

    /**
     * @return LocalDate return the createAt
     */
    public Instant getCreatedAt() {
        return createdAt;
    }

    /**
     * @param createAt the createAt to set
     */
    public void setCreatedAt(Instant createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * @return LocalDate return the updateAt
     */
    public Instant getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @param updateAt the updateAt to set
     */
    public void setUpdatedAt(Instant updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * @return LocalDate return the deleteAt
     */
    public Instant getDeletedAt() {
        return deletedAt;
    }

    /**
     * @param deleteAt the deleteAt to set
     */
    public void setDeletedAt(Instant deletedAt) {
        this.deletedAt = deletedAt;
    }

    @Override
    public void validate(ValidationHandler handler) {
        new CategoryValidator(this, handler).validate();
    }

    public Category deactivate() {
        if(getDeletedAt() == null) {
            this.deletedAt = InstantUtils.now();
        }

        this.active = false;
        this.updatedAt = InstantUtils.now();
        return this;
    }

    public Category activate() {
        this.deletedAt = null;
        this.active = true;
        this.updatedAt = InstantUtils.now();
        return this;
    }

    public Category update(final String aName, final String aDescription, final boolean isActive) {
        if(isActive) {
            activate();
        } else {
            deactivate();
        }

        this.name = aName;
        this.description = aDescription;
        this.updatedAt = InstantUtils.now();
        
        return this;
    }

    @Override
    public Category clone() {
        try {
            return (Category) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
    }


}
